name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job for Web
  build-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.4'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Setup web icons
        run: |
          # Install ImageMagick for icon conversion
          sudo apt-get update
          sudo apt-get install -y imagemagick
          
          # Create icons directory if it doesn't exist
          mkdir -p web/icons
          
          # Convert ifaa-1.png to ICO format for web favicon
          convert assets/icons/ifaa-1.png -resize 32x32 web/favicon.ico
          
          # Convert ifaa-1.png to different PNG formats for web icons
          convert assets/icons/ifaa-1.png -resize 192x192 web/icons/Icon-192.png
          convert assets/icons/ifaa-1.png -resize 512x512 web/icons/Icon-512.png
          convert assets/icons/ifaa-1.png -resize 192x192 web/icons/Icon-maskable-192.png
          convert assets/icons/ifaa-1.png -resize 512x512 web/icons/Icon-maskable-512.png
      
      - name: Build web
        run: flutter build web --release --base-href "/IFAA/"
      
      - name: Copy web icons to build directory
        run: |
          # Copy icons to build directory after Flutter build
          mkdir -p build/web/icons
          cp web/icons/* build/web/icons/
          cp web/favicon.ico build/web/
      
      - name: Compress assets for faster loading
        run: |
          # Install Node.js for asset compression
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Create compress-assets.js script
          cat > compress-assets.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const zlib = require('zlib');

          // Function to recursively get all files in a directory
          function getAllFiles(dirPath, arrayOfFiles) {
            const files = fs.readdirSync(dirPath);
            
            arrayOfFiles = arrayOfFiles || [];
            
            files.forEach((file) => {
              const filePath = path.join(dirPath, file);
              if (fs.statSync(filePath).isDirectory()) {
                arrayOfFiles = getAllFiles(filePath, arrayOfFiles);
              } else {
                arrayOfFiles.push(filePath);
              }
            });
            
            return arrayOfFiles;
          }

          // Function to compress a file using gzip
          function compressFile(filePath) {
            const fileContent = fs.readFileSync(filePath);
            const compressedContent = zlib.gzipSync(fileContent);
            const compressedFilePath = filePath + '.gz';
            fs.writeFileSync(compressedFilePath, compressedContent);
            console.log(`Compressed: ${filePath} -> ${compressedFilePath}`);
          }

          // Function to determine if a file should be compressed
          function shouldCompress(filePath) {
            const compressibleExtensions = [
              '.js', '.css', '.html', '.json', '.xml', '.svg', '.txt', '.map'
            ];
            
            const ext = path.extname(filePath).toLowerCase();
            return compressibleExtensions.includes(ext);
          }

          // Main function
          function compressAssets() {
            const buildDir = path.join(__dirname, 'build', 'web');
            
            if (!fs.existsSync(buildDir)) {
              console.error('Build directory not found.');
              process.exit(1);
            }
            
            console.log('Starting asset compression...');
            
            const files = getAllFiles(buildDir);
            
            let compressedCount = 0;
            
            files.forEach((file) => {
              if (shouldCompress(file)) {
                try {
                  compressFile(file);
                  compressedCount++;
                } catch (error) {
                  console.error(`Error compressing ${file}:`, error.message);
                }
              }
            });
            
            console.log(`Compression complete. Compressed ${compressedCount} files.`);
          }

          // Run the compression
          compressAssets();
          EOF
          
          # Run asset compression
          node compress-assets.js
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload web artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build/web'

  # Build job for Android
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.4'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Add Android platform support
        run: |
          flutter create --platforms android . --project-name ifaa
          flutter pub get
          
          # Update Android app name to IFAA
          sed -i 's/android:label="ifaa"/android:label="IFAA"/' android/app/src/main/AndroidManifest.xml
          
          # Install ImageMagick for icon conversion
          sudo apt-get update
          sudo apt-get install -y imagemagick
          
          # Update Kotlin version for compatibility
          cd android
          echo "Current directory: $(pwd)"
          echo "Files in current directory: $(ls -la)"
          
          # Check if build.gradle.kts exists and update Kotlin version
          if [ -f "build.gradle.kts" ]; then
            echo "Updating build.gradle.kts"
            # In build.gradle.kts, we need to update the Kotlin version in the plugins block
            # This is more complex with sed, so we'll just log that we found it
            echo "build.gradle.kts found - Kotlin version update needs manual handling"
          else
            echo "build.gradle.kts not found in android directory"
          fi
          
          # Check if settings.gradle.kts exists and update Kotlin version
          if [ -f "settings.gradle.kts" ]; then
            echo "Updating settings.gradle.kts"
            # Update Kotlin version in settings.gradle.kts
            sed -i 's/id("org.jetbrains.kotlin.android") version ".*" apply false/id("org.jetbrains.kotlin.android") version "1.9.24" apply false/' settings.gradle.kts
          else
            echo "settings.gradle.kts not found in android directory"
            # Try the old settings.gradle format
            if [ -f "settings.gradle" ]; then
              echo "Found settings.gradle, updating it"
              sed -i 's/id "org.jetbrains.kotlin.android" version .*/id "org.jetbrains.kotlin.android" version "1.9.24" apply false/' settings.gradle
            else
              echo "Neither settings.gradle.kts nor settings.gradle found"
            fi
          fi
          
          # Copy ifaa-1.png to Android app icon locations
          mkdir -p app/src/main/res/mipmap-mdpi
          mkdir -p app/src/main/res/mipmap-hdpi  
          mkdir -p app/src/main/res/mipmap-xhdpi
          mkdir -p app/src/main/res/mipmap-xxhdpi
          mkdir -p app/src/main/res/mipmap-xxxhdpi
          
          # Convert ifaa-1.png to proper Android PNG sizes
          convert ../assets/icons/ifaa-1.png -resize 48x48 app/src/main/res/mipmap-mdpi/ic_launcher.png
          convert ../assets/icons/ifaa-1.png -resize 72x72 app/src/main/res/mipmap-hdpi/ic_launcher.png
          convert ../assets/icons/ifaa-1.png -resize 96x96 app/src/main/res/mipmap-xhdpi/ic_launcher.png
          convert ../assets/icons/ifaa-1.png -resize 144x144 app/src/main/res/mipmap-xxhdpi/ic_launcher.png
          convert ../assets/icons/ifaa-1.png -resize 192x192 app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
          
          cd ..
      
      - name: Build APK
        run: flutter build apk --release
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ifaa-app-android-release
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30

  # Build job for iOS
  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.4'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Add iOS platform support
        run: |
          flutter create --platforms ios . --project-name ifaa
          flutter pub get
          
          # Update iOS app name to IFAA
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName IFAA" ios/Runner/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleName IFAA" ios/Runner/Info.plist
          
          # Install ImageMagick for icon conversion (macOS)
          brew install imagemagick
          
          # Create iOS app icon set directory
          mkdir -p ios/Runner/Assets.xcassets/AppIcon.appiconset
          
          # Convert ifaa-1.png to iOS app icon sizes
          convert assets/icons/ifaa-1.png -resize 20x20 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x.png
          convert assets/icons/ifaa-1.png -resize 40x40 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x.png
          convert assets/icons/ifaa-1.png -resize 60x60 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x.png
          convert assets/icons/ifaa-1.png -resize 29x29 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@1x.png
          convert assets/icons/ifaa-1.png -resize 58x58 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x.png
          convert assets/icons/ifaa-1.png -resize 87x87 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x.png
          convert assets/icons/ifaa-1.png -resize 40x40 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@1x.png
          convert assets/icons/ifaa-1.png -resize 80x80 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x.png
          convert assets/icons/ifaa-1.png -resize 120x120 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x.png
          convert assets/icons/ifaa-1.png -resize 120x120 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x.png
          convert assets/icons/ifaa-1.png -resize 180x180 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x.png
          convert assets/icons/ifaa-1.png -resize 76x76 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@1x.png
          convert assets/icons/ifaa-1.png -resize 152x152 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@2x.png
          convert assets/icons/ifaa-1.png -resize 167x167 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-83.5x83.5@2x.png
          convert assets/icons/ifaa-1.png -resize 1024x1024 ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png
      
      - name: Build iOS app (no signing)
        run: |
          flutter build ios --release --no-codesign
          
          # Create IPA file for installation
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -r Runner.app Payload/
          zip -r ../../../IFAA-iOS.ipa Payload/
          cd ../../..
        continue-on-error: true
      
      - name: Upload iOS IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ifaa-app-ios-ipa
          path: IFAA-iOS.ipa
          retention-days: 30
        continue-on-error: true
        
      - name: Upload iOS build artifact (for development)
        uses: actions/upload-artifact@v4
        with:
          name: ifaa-app-ios-build
          path: build/ios/iphoneos/Runner.app
          retention-days: 30
        continue-on-error: true

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-web
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4